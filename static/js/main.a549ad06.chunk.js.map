{"version":3,"sources":["components/Form.js","components/Appointment.js","App.js","serviceWorker.js","index.js"],"names":["Form","addAppointment","useState","pet","name","date","time","sympthoms","appointment","updateAppointment","error","updateError","handleChange","e","target","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Appointment","removeAppointment","onClick","App","initialSchedule","JSON","parse","localStorage","getItem","schedule","updateSchedule","useEffect","setItem","stringify","newschedule","filter","title","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a549ad06.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ addAppointment }) => {\r\n  //Creatin Appointment State\r\n  const [appointment, updateAppointment] = useState({\r\n    pet: \"\",\r\n    name: \"\",\r\n    date: \"\",\r\n    time: \"\",\r\n    sympthoms: \"\",\r\n  });\r\n\r\n  const [error, updateError] = useState(false);\r\n\r\n  //handleChange declaration\r\n  const handleChange = (e) => {\r\n    updateAppointment({\r\n      ...appointment,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //get Values\r\n  const { pet, name, date, time, sympthoms } = appointment;\r\n\r\n  //handleSubmit Declaration\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Fields Validation\r\n    if (\r\n      pet.trim() === \"\" ||\r\n      name.trim() === \"\" ||\r\n      date.trim() === \"\" ||\r\n      time.trim() === \"\" ||\r\n      sympthoms.trim() === \"\"\r\n    ) {\r\n      updateError(true);\r\n      return;\r\n    }\r\n    updateError(false);\r\n\r\n    //Asign ID\r\n    appointment.id = uuid();\r\n    // console.log(appointment);\r\n\r\n    //Create Appintment\r\n    addAppointment(appointment);\r\n\r\n    //Clean Form\r\n    updateAppointment({\r\n      pet: \"\",\r\n      name: \"\",\r\n      date: \"\",\r\n      time: \"\",\r\n      sympthoms: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>New Appointment</h2>\r\n\r\n      {error ? (\r\n        <p className=\"alert-error\">All the fields are required</p>\r\n      ) : null}\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <label>Pet Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"pet\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ex.: Nala\"\r\n          onChange={handleChange}\r\n          value={pet}\r\n        />\r\n\r\n        <label>Pets' Human Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Ex.: Saray\"\r\n          onChange={handleChange}\r\n          value={name}\r\n        />\r\n\r\n        <label>Appointment Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={date}\r\n        />\r\n\r\n        <label>Appointment Time</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={time}\r\n        />\r\n\r\n        <label>Symptomology</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"sympthoms\"\r\n          onChange={handleChange}\r\n          value={sympthoms}\r\n        ></textarea>\r\n\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Save Appointment\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  addAppointment: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Appointment = ({ appointment, removeAppointment }) => (\r\n  <div className=\"appointment\">\r\n    <p>\r\n      Pet Name: <span>{appointment.pet}</span>\r\n    </p>\r\n    <p>\r\n      Human Name: <span>{appointment.name}</span>\r\n    </p>\r\n    <p>\r\n      Date: <span>{appointment.date}</span>\r\n    </p>\r\n    <p>\r\n      Time: <span>{appointment.time}</span>\r\n    </p>\r\n    <p>\r\n      Symptomology: <span>{appointment.sympthoms}</span>\r\n    </p>\r\n\r\n    <button\r\n      className=\"button remove u-full-width\"\r\n      onClick={() => removeAppointment(appointment.id)}\r\n    >Remove &times;</button>\r\n  </div>\r\n);\r\n\r\nAppointment.propTypes = {\r\n  appointment: PropTypes.object.isRequired,\r\n  removeAppointment:PropTypes.func.isRequired\r\n}\r\nexport default Appointment;\r\n","import React, {Fragment, useState, useEffect} from 'react';\nimport Form from './components/Form';\nimport Appointment from './components/Appointment';\n\n\nfunction App() {\n\n  // Appointmens in local storage\n  let initialSchedule = JSON.parse(localStorage.getItem('schedule'));\n  if(!initialSchedule){\n    initialSchedule = [];\n  } \n\n  // schedule state\n  const [schedule, updateSchedule] = useState(initialSchedule);\n\n  //Triger when statew changes, whith useEffect hook\n  useEffect(() => {\n    let initialSchedule = JSON.parse(localStorage.getItem('schedule'));\n\n    if(initialSchedule){\n      localStorage.setItem('schedule', JSON.stringify(schedule))\n    } else{\n      localStorage.setItem('schedule', JSON.stringify([]))\n    }\n  }, [schedule]);\n\n  //add new appointment to schedule\n  const addAppointment = appointment => {\n    updateSchedule([\n      ...schedule,\n      appointment\n    ]);\n  }\n\n  //remove appointment from schedule\n  const removeAppointment = id =>{\n    const newschedule = schedule.filter(appointment => appointment.id !== id);\n    updateSchedule(newschedule);\n  }\n\n  // Conditional Message\n  const title = schedule.length === 0 ? 'Schedule Empty :(' : 'Schedule'\n\n  return (\n    <Fragment>\n          <h1>Vaterinary appointments admin</h1>\n\n          <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"one-half column\">\n                  <Form \n                    addAppointment={addAppointment}\n                  />\n                </div>\n                <div className=\"one-half column\">\n                  <h2>{title}</h2>\n                  {schedule.map(appointment => (\n                    <Appointment\n                      key={appointment.id} \n                      appointment={appointment}\n                      removeAppointment={removeAppointment}\n                    />\n                  ))}\n                </div>\n              </div>\n          </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}